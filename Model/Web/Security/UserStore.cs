//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModelCodeFluent.Web.Security
{
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Saturday, 19 November 2016 13:35.
    // Build:1.0.61214.0842
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0842")]
    public partial class UserStore : Microsoft.AspNet.Identity.IUserStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserPasswordStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserPasswordStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserSecurityStampStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserSecurityStampStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserLockoutStore<ModelCodeFluent.Identity.User, string>, Microsoft.AspNet.Identity.IUserLockoutStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserPhoneNumberStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserPhoneNumberStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserTwoFactorStore<ModelCodeFluent.Identity.User, string>, Microsoft.AspNet.Identity.IUserTwoFactorStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserEmailStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserEmailStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserRoleStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserRoleStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserLoginStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserLoginStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IUserClaimStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IUserClaimStore<ModelCodeFluent.Identity.User, System.Guid>, Microsoft.AspNet.Identity.IQueryableUserStore<ModelCodeFluent.Identity.User>, Microsoft.AspNet.Identity.IQueryableUserStore<ModelCodeFluent.Identity.User, System.Guid>, System.IDisposable
    {
        
        private bool _disposed = false;
        
        public virtual System.Linq.IQueryable<ModelCodeFluent.Identity.User> Users
        {
            get
            {
                return System.Linq.Queryable.AsQueryable(ModelCodeFluent.Identity.UserCollection.LoadAll());
            }
        }
        
        public virtual System.Threading.Tasks.Task CreateAsync(ModelCodeFluent.Identity.User user)
        {
            return this.CreateAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task CreateAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.CreationDateUTC = System.DateTime.UtcNow;
            user.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task UpdateAsync(ModelCodeFluent.Identity.User user)
        {
            return this.UpdateAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task UpdateAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.LastProfileUpdateDate = System.DateTime.UtcNow;
            user.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task DeleteAsync(ModelCodeFluent.Identity.User user)
        {
            return this.DeleteAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task DeleteAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.Delete();
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByIdAsync(string userId)
        {
            return this.FindByIdAsync(userId, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByIdAsync(string userId, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult(ModelCodeFluent.Identity.User.LoadByEntityKey(userId));
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByIdAsync(System.Guid userId)
        {
            return this.FindByIdAsync(userId, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByIdAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult(ModelCodeFluent.Identity.User.Load(userId));
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByNameAsync(string userName)
        {
            return this.FindByNameAsync(userName, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByNameAsync(string userName, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult(ModelCodeFluent.Identity.User.LoadByUserName(userName));
        }
        
        public virtual System.Threading.Tasks.Task<bool> HasPasswordAsync(ModelCodeFluent.Identity.User user)
        {
            return this.HasPasswordAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<bool> HasPasswordAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult((user.Password != null));
        }
        
        public virtual System.Threading.Tasks.Task<string> GetPasswordHashAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetPasswordHashAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<string> GetPasswordHashAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.Password);
        }
        
        public virtual System.Threading.Tasks.Task SetPasswordHashAsync(ModelCodeFluent.Identity.User user, string passwordHash)
        {
            return this.SetPasswordHashAsync(user, passwordHash, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetPasswordHashAsync(ModelCodeFluent.Identity.User user, string passwordHash, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.Password = passwordHash;
            user.LastPasswordChangeDate = System.DateTime.UtcNow;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<string> GetSecurityStampAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetSecurityStampAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<string> GetSecurityStampAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.SecurityStamp);
        }
        
        public virtual System.Threading.Tasks.Task SetSecurityStampAsync(ModelCodeFluent.Identity.User user, string stamp)
        {
            return this.SetSecurityStampAsync(user, stamp, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetSecurityStampAsync(ModelCodeFluent.Identity.User user, string stamp, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.SecurityStamp = stamp;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<System.DateTimeOffset> GetLockoutEndDateAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetLockoutEndDateAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<System.DateTimeOffset> GetLockoutEndDateAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if (user.LockoutEndDateUtc.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new System.DateTimeOffset(System.DateTime.SpecifyKind(user.LockoutEndDateUtc.Value, System.DateTimeKind.Utc)));
            }
            else
            {
                return System.Threading.Tasks.Task.FromResult(new System.DateTimeOffset());
            }
        }
        
        public virtual System.Threading.Tasks.Task SetLockoutEndDateAsync(ModelCodeFluent.Identity.User user, System.DateTimeOffset lockoutEnd)
        {
            return this.SetLockoutEndDateAsync(user, lockoutEnd, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetLockoutEndDateAsync(ModelCodeFluent.Identity.User user, System.DateTimeOffset lockoutEnd, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.LockoutEndDateUtc = lockoutEnd.UtcDateTime;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<int> IncrementAccessFailedCountAsync(ModelCodeFluent.Identity.User user)
        {
            return this.IncrementAccessFailedCountAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<int> IncrementAccessFailedCountAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((user.AccessFailedCount <= 0))
            {
                user.AccessFailedCount = 1;
            }
            else
            {
                user.AccessFailedCount = (user.AccessFailedCount + 1);
            }
            if ((user.AccessFailedCount == 1))
            {
                user.AccessFailedWindowStart = System.DateTime.UtcNow;
            }
            return System.Threading.Tasks.Task.FromResult(user.AccessFailedCount);
        }
        
        public virtual System.Threading.Tasks.Task ResetAccessFailedCountAsync(ModelCodeFluent.Identity.User user)
        {
            return this.ResetAccessFailedCountAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task ResetAccessFailedCountAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.AccessFailedCount = 0;
            return System.Threading.Tasks.Task.FromResult(user.AccessFailedCount);
        }
        
        public virtual System.Threading.Tasks.Task<int> GetAccessFailedCountAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetAccessFailedCountAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<int> GetAccessFailedCountAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.AccessFailedCount);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetLockoutEnabledAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetLockoutEnabledAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetLockoutEnabledAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.LockoutEnabled);
        }
        
        public virtual System.Threading.Tasks.Task SetLockoutEnabledAsync(ModelCodeFluent.Identity.User user, bool enabled)
        {
            return this.SetLockoutEnabledAsync(user, enabled, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetLockoutEnabledAsync(ModelCodeFluent.Identity.User user, bool enabled, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.LockoutEnabled = enabled;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetPhoneNumberConfirmedAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetPhoneNumberConfirmedAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetPhoneNumberConfirmedAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.PhoneNumberConfirmed);
        }
        
        public virtual System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync(ModelCodeFluent.Identity.User user, bool confirmed)
        {
            return this.SetPhoneNumberConfirmedAsync(user, confirmed, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync(ModelCodeFluent.Identity.User user, bool confirmed, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.PhoneNumberConfirmed = confirmed;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<string> GetPhoneNumberAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetPhoneNumberAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<string> GetPhoneNumberAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.PhoneNumber);
        }
        
        public virtual System.Threading.Tasks.Task SetPhoneNumberAsync(ModelCodeFluent.Identity.User user, string phoneNumber)
        {
            return this.SetPhoneNumberAsync(user, phoneNumber, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetPhoneNumberAsync(ModelCodeFluent.Identity.User user, string phoneNumber, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.PhoneNumber = phoneNumber;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetTwoFactorEnabledAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetTwoFactorEnabledAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetTwoFactorEnabledAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.TwoFactorEnabled);
        }
        
        public virtual System.Threading.Tasks.Task SetTwoFactorEnabledAsync(ModelCodeFluent.Identity.User user, bool enabled)
        {
            return this.SetTwoFactorEnabledAsync(user, enabled, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetTwoFactorEnabledAsync(ModelCodeFluent.Identity.User user, bool enabled, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.TwoFactorEnabled = enabled;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<string> GetEmailAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetEmailAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<string> GetEmailAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.Email);
        }
        
        public virtual System.Threading.Tasks.Task SetEmailAsync(ModelCodeFluent.Identity.User user, string email)
        {
            return this.SetEmailAsync(user, email, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetEmailAsync(ModelCodeFluent.Identity.User user, string email, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.Email = email;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetEmailConfirmedAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            return System.Threading.Tasks.Task.FromResult(user.EmailConfirmed);
        }
        
        public virtual System.Threading.Tasks.Task SetEmailConfirmedAsync(ModelCodeFluent.Identity.User user, bool confirmed)
        {
            return this.SetEmailConfirmedAsync(user, confirmed, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task SetEmailConfirmedAsync(ModelCodeFluent.Identity.User user, bool confirmed, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            user.EmailConfirmed = confirmed;
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByEmailAsync(string email)
        {
            return this.FindByEmailAsync(email, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindByEmailAsync(string email, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult(ModelCodeFluent.Identity.User.LoadByEmail(email));
        }
        
        public virtual System.Threading.Tasks.Task AddToRoleAsync(ModelCodeFluent.Identity.User user, string roleName)
        {
            return this.AddToRoleAsync(user, roleName, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task AddToRoleAsync(ModelCodeFluent.Identity.User user, string roleName, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            ModelCodeFluent.Identity.Role role = ModelCodeFluent.Identity.Role.LoadByName(roleName);
            if ((role == null))
            {
                throw new System.ArgumentException(string.Format("Role \'{0}\' does not exist.", roleName));
            }
            user.Roles.Add(role);
            user.SaveRolesRelations();
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task RemoveFromRoleAsync(ModelCodeFluent.Identity.User user, string roleName)
        {
            return this.RemoveFromRoleAsync(user, roleName, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task RemoveFromRoleAsync(ModelCodeFluent.Identity.User user, string roleName, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            ModelCodeFluent.Identity.Role role = ModelCodeFluent.Identity.Role.LoadByName(roleName);
            if ((role == null))
            {
                throw new System.ArgumentException(string.Format("Role \'{0}\' does not exist.", roleName));
            }
            user.Roles.Remove(role);
            user.SaveRolesRelations();
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> GetRolesAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetRolesAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> GetRolesAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            System.Collections.Generic.IList<string> roleNames = new System.Collections.Generic.List<string>();
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.Role> enumerator = user.Roles.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                roleNames.Add(enumerator.Current.Name);
            }
            return System.Threading.Tasks.Task.FromResult(roleNames);
        }
        
        public virtual System.Threading.Tasks.Task<bool> IsInRoleAsync(ModelCodeFluent.Identity.User user, string roleName)
        {
            return this.IsInRoleAsync(user, roleName, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<bool> IsInRoleAsync(ModelCodeFluent.Identity.User user, string roleName, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            ModelCodeFluent.Identity.Role role = ModelCodeFluent.Identity.Role.LoadByName(roleName);
            if ((role == null))
            {
                throw new System.ArgumentException(string.Format("Role \'{0}\' does not exist.", roleName));
            }
            bool result = user.Roles.Contains(role);
            return System.Threading.Tasks.Task.FromResult(result);
        }
        
        public virtual System.Threading.Tasks.Task AddLoginAsync(ModelCodeFluent.Identity.User user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo)
        {
            return this.AddLoginAsync(user, userLoginInfo, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task AddLoginAsync(ModelCodeFluent.Identity.User user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((userLoginInfo == null))
            {
                throw new System.ArgumentNullException("userLoginInfo");
            }
            ModelCodeFluent.Identity.UserLogin login = new ModelCodeFluent.Identity.UserLogin();
            login.User = user;
            login.ProviderKey = userLoginInfo.ProviderKey;
            login.ProviderName = userLoginInfo.LoginProvider;
            login.Save();
            user.Logins.Add(login);
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task RemoveLoginAsync(ModelCodeFluent.Identity.User user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo)
        {
            return this.RemoveLoginAsync(user, userLoginInfo, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task RemoveLoginAsync(ModelCodeFluent.Identity.User user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((userLoginInfo == null))
            {
                throw new System.ArgumentNullException("userLoginInfo");
            }
            System.Collections.Generic.IList<ModelCodeFluent.Identity.UserLogin> toDelete = new System.Collections.Generic.List<ModelCodeFluent.Identity.UserLogin>();
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserLogin> enumerator = user.Logins.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                ModelCodeFluent.Identity.UserLogin userLogin = enumerator.Current;
                if ((string.Equals(userLogin.ProviderKey, userLoginInfo.ProviderKey, System.StringComparison.OrdinalIgnoreCase) && string.Equals(userLogin.ProviderName, userLoginInfo.LoginProvider, System.StringComparison.OrdinalIgnoreCase)))
                {
                    toDelete.Add(userLogin);
                }
            }
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserLogin> enumerator1 = toDelete.GetEnumerator(); enumerator1.MoveNext(); 
            )
            {
                ModelCodeFluent.Identity.UserLogin userLogin = enumerator1.Current;
                userLogin.Delete();
                user.Logins.Remove(userLogin);
            }
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo>> GetLoginsAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetLoginsAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo>> GetLoginsAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo> result = new System.Collections.Generic.List<Microsoft.AspNet.Identity.UserLoginInfo>();
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserLogin> enumerator = user.Logins.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                ModelCodeFluent.Identity.UserLogin userLogin = enumerator.Current;
                result.Add(new Microsoft.AspNet.Identity.UserLoginInfo(userLogin.ProviderName, userLogin.ProviderKey));
            }
            return System.Threading.Tasks.Task.FromResult(result);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindAsync(Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo)
        {
            return this.FindAsync(userLoginInfo, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<ModelCodeFluent.Identity.User> FindAsync(Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult(ModelCodeFluent.Identity.User.LoadByUserLoginInfo(userLoginInfo.ProviderKey, userLoginInfo.LoginProvider));
        }
        
        public virtual System.Threading.Tasks.Task AddClaimAsync(ModelCodeFluent.Identity.User user, System.Security.Claims.Claim claim)
        {
            return this.AddClaimAsync(user, claim, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task AddClaimAsync(ModelCodeFluent.Identity.User user, System.Security.Claims.Claim claim, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((claim == null))
            {
                throw new System.ArgumentNullException("claim");
            }
            ModelCodeFluent.Identity.UserClaim userClaim = new ModelCodeFluent.Identity.UserClaim();
            userClaim.User = user;
            userClaim.Type = claim.Type;
            userClaim.Value = claim.Value;
            userClaim.Issuer = claim.Issuer;
            userClaim.OriginalIssuer = claim.OriginalIssuer;
            userClaim.ValueType = claim.ValueType;
            userClaim.Save();
            user.Claims.Add(userClaim);
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task AddClaimsAsync(ModelCodeFluent.Identity.User user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims)
        {
            return this.AddClaimsAsync(user, claims, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task AddClaimsAsync(ModelCodeFluent.Identity.User user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((claims == null))
            {
                throw new System.ArgumentNullException("claims");
            }
            for (System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> enumerator = claims.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                System.Security.Claims.Claim claim = enumerator.Current;
                ModelCodeFluent.Identity.UserClaim userClaim = new ModelCodeFluent.Identity.UserClaim();
                userClaim.User = user;
                userClaim.Type = claim.Type;
                userClaim.Value = claim.Value;
                userClaim.Issuer = claim.Issuer;
                userClaim.OriginalIssuer = claim.OriginalIssuer;
                userClaim.ValueType = claim.ValueType;
                userClaim.Save();
                user.Claims.Add(userClaim);
            }
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task RemoveClaimAsync(ModelCodeFluent.Identity.User user, System.Security.Claims.Claim claim)
        {
            return this.RemoveClaimAsync(user, claim, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task RemoveClaimAsync(ModelCodeFluent.Identity.User user, System.Security.Claims.Claim claim, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((claim == null))
            {
                throw new System.ArgumentNullException("claim");
            }
            System.Collections.Generic.IList<ModelCodeFluent.Identity.UserClaim> toDelete = new System.Collections.Generic.List<ModelCodeFluent.Identity.UserClaim>();
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserClaim> enumerator = user.Claims.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                ModelCodeFluent.Identity.UserClaim userClaim = enumerator.Current;
                if ((string.Equals(userClaim.Type, claim.Type, System.StringComparison.OrdinalIgnoreCase) && string.Equals(userClaim.Value, claim.Value, System.StringComparison.OrdinalIgnoreCase)))
                {
                    toDelete.Add(userClaim);
                }
            }
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserClaim> enumerator1 = toDelete.GetEnumerator(); enumerator1.MoveNext(); 
            )
            {
                ModelCodeFluent.Identity.UserClaim userClaim = enumerator1.Current;
                userClaim.Delete();
                user.Claims.Remove(userClaim);
            }
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task RemoveClaimsAsync(ModelCodeFluent.Identity.User user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims)
        {
            return this.RemoveClaimsAsync(user, claims, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task RemoveClaimsAsync(ModelCodeFluent.Identity.User user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((claims == null))
            {
                throw new System.ArgumentNullException("claims");
            }
            for (System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> claimEnumerator = claims.GetEnumerator(); claimEnumerator.MoveNext(); 
            )
            {
                System.Security.Claims.Claim claim = claimEnumerator.Current;
                System.Collections.Generic.IList<ModelCodeFluent.Identity.UserClaim> toDelete = new System.Collections.Generic.List<ModelCodeFluent.Identity.UserClaim>();
                for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserClaim> enumerator = user.Claims.GetEnumerator(); enumerator.MoveNext(); 
                )
                {
                    ModelCodeFluent.Identity.UserClaim userClaim = enumerator.Current;
                    if ((string.Equals(userClaim.Type, claim.Type, System.StringComparison.OrdinalIgnoreCase) && string.Equals(userClaim.Value, claim.Value, System.StringComparison.OrdinalIgnoreCase)))
                    {
                        toDelete.Add(userClaim);
                    }
                }
                for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserClaim> enumerator1 = toDelete.GetEnumerator(); enumerator1.MoveNext(); 
                )
                {
                    ModelCodeFluent.Identity.UserClaim userClaim = enumerator1.Current;
                    userClaim.Delete();
                    user.Claims.Remove(userClaim);
                }
            }
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task ReplaceClaimAsync(ModelCodeFluent.Identity.User user, System.Security.Claims.Claim oldClaim, System.Security.Claims.Claim newClaim)
        {
            return this.ReplaceClaimAsync(user, oldClaim, newClaim, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task ReplaceClaimAsync(ModelCodeFluent.Identity.User user, System.Security.Claims.Claim oldClaim, System.Security.Claims.Claim newClaim, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            if ((oldClaim == null))
            {
                throw new System.ArgumentNullException("oldClaim");
            }
            if ((newClaim == null))
            {
                throw new System.ArgumentNullException("newClaim");
            }
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserClaim> enumerator = user.Claims.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                ModelCodeFluent.Identity.UserClaim userClaim = enumerator.Current;
                if ((string.Equals(userClaim.Type, oldClaim.Type, System.StringComparison.OrdinalIgnoreCase) && string.Equals(userClaim.Value, oldClaim.Value, System.StringComparison.OrdinalIgnoreCase)))
                {
                    userClaim.User = user;
                    userClaim.Type = newClaim.Type;
                    userClaim.Value = newClaim.Value;
                    userClaim.Issuer = newClaim.Issuer;
                    userClaim.OriginalIssuer = newClaim.OriginalIssuer;
                    userClaim.ValueType = newClaim.ValueType;
                    userClaim.Save();
                }
            }
            return System.Threading.Tasks.Task.FromResult(0);
        }
        
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>> GetClaimsAsync(ModelCodeFluent.Identity.User user)
        {
            return this.GetClaimsAsync(user, System.Threading.CancellationToken.None);
        }
        
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>> GetClaimsAsync(ModelCodeFluent.Identity.User user, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            this.ThrowIfDisposed();
            if ((user == null))
            {
                throw new System.ArgumentNullException("user");
            }
            System.Collections.Generic.IList<System.Security.Claims.Claim> result = new System.Collections.Generic.List<System.Security.Claims.Claim>();
            for (System.Collections.Generic.IEnumerator<ModelCodeFluent.Identity.UserClaim> enumerator = user.Claims.GetEnumerator(); enumerator.MoveNext(); 
            )
            {
                ModelCodeFluent.Identity.UserClaim userClaim = enumerator.Current;
                result.Add(new System.Security.Claims.Claim(userClaim.Type, userClaim.Value, userClaim.ValueType, userClaim.Issuer, userClaim.OriginalIssuer));
            }
            return System.Threading.Tasks.Task.FromResult(result);
        }
        
        public virtual void Dispose()
        {
            this._disposed = true;
        }
        
        protected virtual void ThrowIfDisposed()
        {
            if ((this._disposed == true))
            {
                throw new System.ObjectDisposedException(this.GetType().Name);
            }
        }
    }
}
